// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository.go

// Package pkg is a generated GoMock package.
package pkg

import (
	domain "joubertredrat/transaction-ms/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCreditCardTransactionRepository is a mock of CreditCardTransactionRepository interface.
type MockCreditCardTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreditCardTransactionRepositoryMockRecorder
}

// MockCreditCardTransactionRepositoryMockRecorder is the mock recorder for MockCreditCardTransactionRepository.
type MockCreditCardTransactionRepositoryMockRecorder struct {
	mock *MockCreditCardTransactionRepository
}

// NewMockCreditCardTransactionRepository creates a new mock instance.
func NewMockCreditCardTransactionRepository(ctrl *gomock.Controller) *MockCreditCardTransactionRepository {
	mock := &MockCreditCardTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockCreditCardTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreditCardTransactionRepository) EXPECT() *MockCreditCardTransactionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreditCardTransactionRepository) Create(c domain.CreditCardTransaction) (domain.CreditCardTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c)
	ret0, _ := ret[0].(domain.CreditCardTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCreditCardTransactionRepositoryMockRecorder) Create(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreditCardTransactionRepository)(nil).Create), c)
}

// GetByTransactionID mocks base method.
func (m *MockCreditCardTransactionRepository) GetByTransactionID(TransactionID string) (domain.CreditCardTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionID", TransactionID)
	ret0, _ := ret[0].(domain.CreditCardTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionID indicates an expected call of GetByTransactionID.
func (mr *MockCreditCardTransactionRepositoryMockRecorder) GetByTransactionID(TransactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionID", reflect.TypeOf((*MockCreditCardTransactionRepository)(nil).GetByTransactionID), TransactionID)
}

// GetList mocks base method.
func (m *MockCreditCardTransactionRepository) GetList(p domain.PaginationCriteria) ([]domain.CreditCardTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", p)
	ret0, _ := ret[0].([]domain.CreditCardTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockCreditCardTransactionRepositoryMockRecorder) GetList(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockCreditCardTransactionRepository)(nil).GetList), p)
}

// Update mocks base method.
func (m *MockCreditCardTransactionRepository) Update(c domain.CreditCardTransaction) (domain.CreditCardTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c)
	ret0, _ := ret[0].(domain.CreditCardTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCreditCardTransactionRepositoryMockRecorder) Update(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCreditCardTransactionRepository)(nil).Update), c)
}

// MockTransactionStatusRepository is a mock of TransactionStatusRepository interface.
type MockTransactionStatusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionStatusRepositoryMockRecorder
}

// MockTransactionStatusRepositoryMockRecorder is the mock recorder for MockTransactionStatusRepository.
type MockTransactionStatusRepositoryMockRecorder struct {
	mock *MockTransactionStatusRepository
}

// NewMockTransactionStatusRepository creates a new mock instance.
func NewMockTransactionStatusRepository(ctrl *gomock.Controller) *MockTransactionStatusRepository {
	mock := &MockTransactionStatusRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionStatusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionStatusRepository) EXPECT() *MockTransactionStatusRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionStatusRepository) Create(t domain.TransactionStatus) (domain.TransactionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", t)
	ret0, _ := ret[0].(domain.TransactionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionStatusRepositoryMockRecorder) Create(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionStatusRepository)(nil).Create), t)
}

// GetByCreditCardTransctionID mocks base method.
func (m *MockTransactionStatusRepository) GetByCreditCardTransctionID(TransactionID string) ([]domain.TransactionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCreditCardTransctionID", TransactionID)
	ret0, _ := ret[0].([]domain.TransactionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCreditCardTransctionID indicates an expected call of GetByCreditCardTransctionID.
func (mr *MockTransactionStatusRepositoryMockRecorder) GetByCreditCardTransctionID(TransactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCreditCardTransctionID", reflect.TypeOf((*MockTransactionStatusRepository)(nil).GetByCreditCardTransctionID), TransactionID)
}

// GetByID mocks base method.
func (m *MockTransactionStatusRepository) GetByID(ID string) (domain.TransactionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ID)
	ret0, _ := ret[0].(domain.TransactionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTransactionStatusRepositoryMockRecorder) GetByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTransactionStatusRepository)(nil).GetByID), ID)
}
